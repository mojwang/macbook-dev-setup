name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run tests
      run: |
        echo "Running test suite..."
        # Use parallel test runner in CI for faster execution
        if [[ -f ./tests/run_tests_parallel_simple.sh ]]; then
          echo "Using parallel test runner..."
          ./tests/run_tests_parallel_simple.sh
        else
          echo "Using sequential test runner..."
          ./tests/run_tests.sh
        fi
    
    - name: Validate scripts
      run: |
        echo "Validating shell scripts with shellcheck..."
        brew install shellcheck || true
        
        # Check all shell scripts
        find . -name "*.sh" -type f | while read -r script; do
          echo "Checking: $script"
          shellcheck "$script" || true
        done
    
    - name: Test preview mode
      run: |
        echo "Testing setup script in preview mode..."
        ./setup.sh preview
    
    - name: Test health check
      run: |
        echo "Testing health check script..."
        ./scripts/health-check.sh || true

  validate-documentation:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check markdown files
      run: |
        echo "Validating markdown files..."
        # Check for broken links in markdown files (basic check)
        find . -name "*.md" -type f | while read -r file; do
          echo "Checking: $file"
          # Basic validation - ensure files exist
          grep -oE '\[.*\]\(.*\)' "$file" | grep -oE '\(.*\)' | tr -d '()' | while read -r link; do
            if [[ "$link" =~ ^https?:// ]]; then
              echo "  External link: $link"
            elif [[ -f "$link" ]]; then
              echo "  ✓ Valid file link: $link"
            elif [[ "$link" =~ ^# ]]; then
              echo "  Anchor link: $link"
            else
              echo "  ⚠ Possible broken link: $link"
            fi
          done
        done

  security-scan:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for secrets
      run: |
        echo "Checking for potential secrets..."
        # Basic secret detection
        grep -rEn "(password|secret|key|token|api_key).*=.*['\"]" . --include="*.sh" || echo "No hardcoded secrets found"
        
        # Check for common secret patterns
        grep -rEn "[0-9a-f]{40}" . --include="*.sh" | grep -v "sha256" || echo "No potential API keys found"

  agent-tests:
    name: Claude Agent Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test Quality Agent
      run: |
        echo "Testing Quality Agent..."
        if [[ -f tests/agents/test_quality_agent.sh ]]; then
          bash tests/agents/test_quality_agent.sh || echo "Quality Agent test completed"
        fi
    
    - name: Test Security Agent
      run: |
        echo "Testing Security Agent..."
        if [[ -f tests/agents/test_security_agent.sh ]]; then
          bash tests/agents/test_security_agent.sh || echo "Security Agent test completed"
        fi
    
    - name: Test Shell Script Agent
      run: |
        echo "Testing Shell Script Agent..."
        if [[ -f tests/agents/test_shell_agent.sh ]]; then
          bash tests/agents/test_shell_agent.sh || echo "Shell Agent test completed"
        fi
    
    - name: Validate Agent Workflows
      run: |
        echo "Validating agent workflows..."
        if [[ -f scripts/claude-agents/test-agent-workflows.sh ]]; then
          bash scripts/claude-agents/test-agent-workflows.sh validate || echo "Workflow validation completed"
        fi
    
    - name: Run Agent Benchmarks
      run: |
        echo "Running agent performance benchmarks..."
        if [[ -f scripts/claude-agents/agent-benchmarks.sh ]]; then
          # Run benchmarks and capture output
          ITERATIONS=2 OUTPUT_FORMAT=json bash scripts/claude-agents/agent-benchmarks.sh report > benchmark_results.json || echo "Benchmarks completed"
          
          # TODO: Future enhancement - compare with baseline
          # if [[ -f .github/benchmark_baseline.json ]]; then
          #   python3 scripts/compare_benchmarks.py benchmark_results.json .github/benchmark_baseline.json
          # fi
        fi

  # Summary job that depends on all other jobs
  # This is the job that will be required in branch protection
  all-checks-pass:
    name: All Checks Pass
    runs-on: macos-latest
    needs: [test, validate-documentation, security-scan, agent-tests]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Test job failed"
          exit 1
        fi
        
        if [[ "${{ needs.validate-documentation.result }}" != "success" ]]; then
          echo "❌ Documentation validation job failed"
          exit 1
        fi
        
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Security scan job failed"
          exit 1
        fi
        
        if [[ "${{ needs.agent-tests.result }}" != "success" ]]; then
          echo "❌ Agent tests job failed"
          exit 1
        fi
        
        echo "✅ All checks passed successfully!"