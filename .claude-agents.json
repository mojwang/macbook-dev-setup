{
  "version": "1.0.0",
  "project": "macbook-dev-setup",
  "description": "Claude sub-agent configuration for automated macOS dev environment setup",
  
  "agents": {
    "quality": {
      "name": "Quality & Testing Agent",
      "enabled": true,
      "priority": "high",
      "triggers": [
        "after_feature_implementation",
        "before_commit",
        "on_test_file_change"
      ],
      "configuration": {
        "test_coverage_threshold": 80,
        "performance_threshold_ms": 100,
        "require_tests_for_features": true,
        "test_frameworks": ["bash", "bdd", "tdd", "sdd"]
      },
      "prompts": {
        "default": "Run quality checks and ensure all tests pass",
        "thorough": "Perform comprehensive quality analysis including coverage, performance, and idempotency"
      }
    },
    
    "security": {
      "name": "Security Analysis Agent",
      "enabled": true,
      "priority": "critical",
      "triggers": [
        "on_shell_script_change",
        "on_api_key_handling",
        "on_sudo_usage",
        "before_commit"
      ],
      "configuration": {
        "scan_for_secrets": true,
        "check_permissions": true,
        "validate_https": true,
        "max_sudo_usage": 2,
        "blocked_patterns": [
          "eval.*user_input",
          "rm -rf /",
          "curl http://",
          "hardcoded_password"
        ]
      },
      "prompts": {
        "default": "Perform security analysis on the code",
        "comprehensive": "Run full security audit including dependencies and permissions"
      }
    },
    
    "shell": {
      "name": "Shell Script Specialist Agent",
      "enabled": true,
      "priority": "high",
      "triggers": [
        "on_sh_file_creation",
        "on_sh_file_modification",
        "on_performance_request"
      ],
      "configuration": {
        "require_set_e": true,
        "require_signal_handlers": true,
        "optimize_parallel": true,
        "shellcheck_enabled": true,
        "posix_check": false,
        "timeout_seconds": 30
      },
      "prompts": {
        "default": "Validate and optimize shell script",
        "performance": "Optimize shell script for parallel execution and performance"
      }
    },
    
    "development": {
      "name": "Development Agent",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_feature_request",
        "on_bug_report",
        "on_refactor_request"
      ],
      "configuration": {
        "follow_conventions": true,
        "prefer_edit_over_create": true,
        "maintain_consistency": true,
        "auto_add_tests": true
      },
      "prompts": {
        "default": "Implement the requested feature",
        "refactor": "Refactor code while maintaining functionality"
      }
    },
    
    "dependency": {
      "name": "Dependency Management Agent",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "weekly_check",
        "on_security_alert",
        "on_brewfile_change"
      ],
      "configuration": {
        "check_updates": true,
        "scan_vulnerabilities": true,
        "auto_update_patch": false,
        "package_managers": ["homebrew", "npm", "pip", "gem"]
      },
      "prompts": {
        "default": "Check for dependency updates and vulnerabilities",
        "update": "Update all dependencies to latest compatible versions"
      }
    },
    
    "configuration": {
      "name": "Configuration Validator Agent",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_dotfile_change",
        "on_mcp_config_change",
        "on_vscode_settings_change"
      ],
      "configuration": {
        "validate_syntax": true,
        "check_symlinks": true,
        "verify_idempotency": true
      },
      "prompts": {
        "default": "Validate configuration files",
        "mcp": "Validate and test MCP server configurations"
      }
    },
    
    "documentation": {
      "name": "Documentation Sync Agent",
      "enabled": true,
      "priority": "low",
      "triggers": [
        "after_code_change",
        "before_release",
        "on_command_addition"
      ],
      "configuration": {
        "auto_update_changelog": true,
        "sync_inline_docs": true,
        "generate_references": true
      },
      "prompts": {
        "default": "Update documentation to reflect changes",
        "changelog": "Update CHANGELOG.md with recent changes"
      }
    },
    
    "performance": {
      "name": "Performance Optimization Agent",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_slow_execution",
        "on_startup_delay",
        "on_optimization_request"
      ],
      "configuration": {
        "shell_startup_threshold_ms": 100,
        "script_timeout_seconds": 30,
        "enable_profiling": true,
        "parallel_jobs": "auto"
      },
      "prompts": {
        "default": "Optimize performance and identify bottlenecks",
        "startup": "Optimize shell startup time"
      }
    },
    
    "mcp": {
      "name": "MCP Integration Agent",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_mcp_server_install",
        "on_connection_issue",
        "on_api_key_setup"
      ],
      "configuration": {
        "debug_connections": true,
        "validate_api_keys": true,
        "test_integrations": true
      },
      "prompts": {
        "default": "Debug and fix MCP server issues",
        "setup": "Configure and test MCP server installation"
      }
    },
    
    "product_manager": {
      "name": "Product Manager",
      "enabled": true,
      "priority": "high",
      "triggers": [
        "on_prd_provided",
        "on_complex_project",
        "on_task_management_request",
        "on_multi_step_feature"
      ],
      "configuration": {
        "discovery_methods": {
          "customer_interviews": "simulated_personas",
          "surveys": "ai_generated_responses",
          "usability_testing": "heuristic_evaluation",
          "market_analysis": "web_research",
          "competitive_analysis": "automated_comparison"
        },
        "risk_assessment": {
          "value_risk": true,
          "usability_risk": true,
          "feasibility_risk": true,
          "viability_risk": true
        },
        "frameworks": [
          "opportunity_assessment",
          "jobs_to_be_done",
          "design_thinking",
          "lean_startup",
          "dual_track_agile"
        ],
        "auto_parse_prd": true,
        "analyze_complexity": true,
        "research_enabled": "auto",
        "break_down_tasks": true,
        "track_progress": true
      },
      "prompts": {
        "default": "Parse PRD and create comprehensive task breakdown with implementation plan",
        "discovery": "Conduct product discovery: identify customer problems, assess four risks, define success metrics",
        "opportunity": "Create opportunity assessment: problem, target user, market size, success criteria",
        "validation": "Validate assumptions through customer interviews and rapid prototyping",
        "prioritization": "Prioritize using ICE (Impact, Confidence, Ease) or RICE framework",
        "roadmap": "Create outcome-based roadmap focused on customer value, not features",
        "research": "Research technical requirements and create detailed implementation tasks",
        "complexity": "Analyze task complexity and suggest optimal implementation order"
      }
    },
    
    "customer_persona": {
      "name": "Customer Persona Simulator",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_customer_research",
        "on_interview_simulation",
        "on_feedback_needed"
      ],
      "configuration": {
        "persona_types": [
          "early_adopter",
          "power_user",
          "casual_user",
          "skeptical_user",
          "enterprise_buyer"
        ],
        "response_styles": {
          "interview": "conversational",
          "survey": "structured",
          "feedback": "detailed"
        }
      },
      "prompts": {
        "default": "Simulate diverse customer perspectives for product validation",
        "interview": "Respond to interview questions as different user personas",
        "feedback": "Provide detailed product feedback from various user perspectives"
      }
    },
    
    "market_research": {
      "name": "Market Research Analyst",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_market_analysis",
        "on_competitive_research",
        "on_sizing_request"
      ],
      "configuration": {
        "research_methods": [
          "competitive_analysis",
          "market_sizing",
          "trend_analysis",
          "technology_adoption"
        ],
        "data_sources": {
          "primary": "web_research",
          "secondary": "industry_reports",
          "tertiary": "expert_synthesis"
        }
      },
      "prompts": {
        "default": "Analyze market trends and competitive landscape",
        "competitive": "Identify and analyze key competitors and their features",
        "sizing": "Estimate market size and growth potential"
      }
    },
    
    "ux_research": {
      "name": "UX Research Specialist",
      "enabled": true,
      "priority": "normal",
      "triggers": [
        "on_usability_testing",
        "on_heuristic_evaluation",
        "on_accessibility_check"
      ],
      "configuration": {
        "evaluation_methods": [
          "nielsen_heuristics",
          "cognitive_walkthrough",
          "accessibility_wcag",
          "information_architecture"
        ],
        "testing_approaches": {
          "heuristic": "expert_review",
          "usability": "simulated_testing",
          "accessibility": "automated_checks"
        }
      },
      "prompts": {
        "default": "Evaluate usability and user experience",
        "heuristic": "Perform heuristic evaluation using Nielsen's principles",
        "accessibility": "Check accessibility compliance and inclusive design"
      }
    }
  },
  
  "workflows": {
    "feature_development": {
      "description": "Standard feature development workflow",
      "sequence": [
        "development",
        "shell",
        "security",
        "quality",
        "documentation"
      ]
    },
    
    "complex_project": {
      "description": "Complex project implementation with PRD",
      "sequence": [
        "product_manager",
        "development",
        "shell",
        "security",
        "quality",
        "documentation"
      ]
    },
    
    "security_audit": {
      "description": "Comprehensive security audit",
      "parallel": [
        "security",
        "dependency"
      ],
      "then": [
        "quality"
      ]
    },
    
    "performance_optimization": {
      "description": "Performance improvement workflow",
      "sequence": [
        "performance",
        "shell",
        "quality"
      ]
    },
    
    "pr_validation": {
      "description": "Pull request validation",
      "parallel": [
        "quality",
        "security",
        "shell"
      ],
      "then": [
        "documentation"
      ]
    },
    
    "mcp_troubleshooting": {
      "description": "MCP server debugging workflow",
      "sequence": [
        "mcp",
        "configuration",
        "quality"
      ]
    },
    
    "product_discovery": {
      "description": "Product discovery and validation process",
      "sequence": [
        "product_manager",
        "customer_persona",
        "market_research",
        "ux_research",
        "product_manager"
      ]
    },
    
    "customer_validation": {
      "description": "Customer validation through simulated interviews",
      "parallel": [
        "customer_persona",
        "market_research"
      ],
      "then": [
        "product_manager",
        "ux_research"
      ]
    }
  },
  
  "coordination": {
    "max_parallel_agents": 3,
    "default_timeout_seconds": 120,
    "task_specific_timeouts": {
      "quality_tests": 180,
      "security_scan": 120,
      "dependency_check": 240,
      "performance_benchmark": 60,
      "documentation_update": 30,
      "mcp_debug": 150
    },
    "retry_on_failure": true,
    "max_retries": 2,
    "cascade_on_critical_failure": false
  },
  
  "quality_gates": {
    "pre_commit": {
      "required_agents": ["security", "shell"],
      "failure_blocks_commit": true
    },
    "pre_push": {
      "required_agents": ["quality", "security"],
      "failure_blocks_push": true
    },
    "pre_merge": {
      "required_agents": ["quality", "security", "documentation"],
      "failure_blocks_merge": true
    }
  },
  
  "reporting": {
    "generate_reports": true,
    "report_format": "markdown",
    "include_metrics": true,
    "output_directory": "reports/agents/"
  },
  
  "experimental": {
    "auto_trigger_agents": false,
    "learn_from_patterns": false,
    "adaptive_thresholds": false
  }
}